{"meta":{"title":"权小爷的QQ空间","subtitle":null,"description":null,"author":"木又","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"策略模式","slug":"策略模式","date":"2019-07-16T03:10:53.000Z","updated":"2019-07-16T03:27:37.617Z","comments":true,"path":"2019/07/16/策略模式/","link":"","permalink":"http://yoursite.com/2019/07/16/策略模式/","excerpt":"","text":"1. 什么是策略模式？策略模式定义了算法族，将它们分别封装起来，让它们可以相互替换。这个模式使算法独立于它的使用者。 譬如我们我们需要实现一个计算器的功能，这个计算器有加减乘除四种计算方式，一般的做法就是创建一个计算器类，然后在这个类中添加加减乘除四个方法。代码如下： 1234567public class Calculator&#123; public int Add(int num1, int num2)&#123;return num1+num2;&#125; public int Sub(int num1, int num2)&#123;return num1-num2;&#125; public int Mul(int num1, int num2)&#123;return num1*num2;&#125; public int Div(int num1, int num2)&#123;return num1/num2;&#125;&#125; 策略模式是将加减乘除分别定义成一个单独的类，当我们使用计算器的时候，动态的替换我们当前使用的算法，具体代码如下： 12345678910111213141516171819202122232425262728public interface Operation&#123; public int Operate(int num1, int num2);&#125;public class AddOperation:Operation&#123; public int Operate(int num1, int num2)&#123;return num1 + num2;&#125;&#125;public class SubOperation:Operation&#123; public int Operate(int num1, int num2)&#123;return num1 - num2;&#125;&#125;public class Calculator&#123; private Operation _curOperation; public void SetOperation(Operation o)&#123;_curOperation = o;&#125; public int Operate(int num1, num2)&#123;return _curOperation.Operate(num1, num2)&#125;&#125;// 使用方法Calculator c = new Calculator();c.SetOperation(new AddOperation());c.Operate(2, 1); // 输出 3c.SetOperation(new SubOperation());c.Operate(2, 1); // 输出 1 策略模式让我们的代码更容易扩展，如果以后需要添加其他的算法，只需要再增加一个新的类，然后实现Operation接口，不需要改动之前的任何代码。 2. 设计模式的优缺点优点： ​ 1. 遵守了开放封闭原则。扩展性良好 缺点： 1. 策略越多，类也就会越多。 2. 所有的算法都应该暴露出去，并且写好文档，让别人知道你已经提供了哪些策略。​","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://yoursite.com/categories/设计模式/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://yoursite.com/tags/设计模式/"},{"name":"策略模式","slug":"策略模式","permalink":"http://yoursite.com/tags/策略模式/"}]}]}